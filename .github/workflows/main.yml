name: Java CI
on: [push]
jobs:
  create-release:
    name: Create new release
    runs-on: ubuntu-latest
    steps:
    - name: Check out code
      uses: actions/checkout@v2
      with:
        repository: visual-est/visual-est
        token: ${{ secrets.PAT }}
        ref: master
    - name: Generate build number
      id: buildnumber
      uses: einaregilsson/build-number@v3
      with:
        token: ${{secrets.github_token}}
    - name: Create new release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: 1.0.${{ steps.buildnumber.outputs.build_number }}
        release_name: Release 1.0.${{ steps.buildnumber.outputs.build_number }}
        draft: false
        prerelease: true
    - name: Put the Release URL into release_url.txt
      run: echo "${{ steps.create_release.outputs.upload_url }}" > release_url.txt
    - name: Upload the release_url.txt artifact
      uses: actions/upload-artifact@v1
      with:
        name: release_url
        path: release_url.txt
    - name: Put the Release Version into release_version.txt
      run: echo "1.0.${{ steps.buildnumber.outputs.build_number }}" > release_version.txt
    - name: Upload the release_version.txt artifact
      uses: actions/upload-artifact@v1
      with:
        name: release_version
        path: release_version.txt

  build-and-upload:
    name: Build and Upload
    needs: [create-release]
    runs-on: ${{ matrix.os }}
    env:
      working-directory: ../visual-est/
    strategy:
      matrix:
        os: [windows-latest, macos-latest]
      fail-fast: false
    steps:
# Common steps
      - name: Check out code
        uses: actions/checkout@v1
        with:
          repository: visual-est/visual-est
          token: ${{ secrets.GITHUB_PAT_MY_PRIVATE_REPO }}
          ref: master 
      - name: Download the release_url.txt artifact
        uses: actions/download-artifact@v1
        with:
          name: release_url
      - name: Download the release_version.txt artifact
        uses: actions/download-artifact@v1
        with:
          name: release_version
      - name: Set up JDK 17
        uses: actions/setup-java@v1
        with:
          java-version: 17
# Windows steps
      - name: (Windows) Parse Release Version from release_version.txt
        if: matrix.os == 'windows-latest'
        id: get_release_version_windows
        run: |
          $value = [IO.File]::ReadAllText("release_version/release_version.txt")
          echo "::set-output name=release_version::$value"
      - name: (Windows) Bump Version
        if: matrix.os == 'windows-latest'
        working-directory: ${{env.working-directory}}
        run: mvn versions:set -DnewVersion="${{ steps.get_release_version_windows.outputs.release_version }}"
# macOS steps
      - name: (macOS) Parse Release Version from release_version.txt
        if: matrix.os == 'macos-latest'
        id: get_release_version_macos
        run: |
          value=`cat ./release_version/release_version.txt`
          echo ::set-output name=release_version::$value
      - name: (macOS) Bump Version
        if: matrix.os == 'macos-latest'
        working-directory: ${{env.working-directory}}
        run: mvn versions:set -DnewVersion="${{ steps.get_release_version_macos.outputs.release_version }}"
# Common steps
      - name: Build with Maven
        working-directory: ${{env.working-directory}}
        run: mvn -B package --file pom.xml
# Windows steps
      - name: (Windows) Parse Release URL from release.txt
        if: matrix.os == 'windows-latest'
        id: get_release_info_windows
        run: |
          $value = [IO.File]::ReadAllText("release_url/release_url.txt")
          echo "::set-output name=upload_url::$value"
      - name: (Windows) Zip the artefacts
        working-directory: ${{env.working-directory}}
        if: matrix.os == 'windows-latest'
        run: powershell.exe -NoLogo -NoProfile -command "& { Compress-Archive -Path ./target/installer/VisualEST/ -DestinationPath VisualEST-Win.zip }"
      - name: (Windows) Upload the release assets
        if: matrix.os == 'windows-latest'
        id: upload-release-asset-windows 
        uses: actions/upload-release-asset@v1.0.1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.get_release_info_windows.outputs.upload_url }} 
          asset_path: "${{env.working-directory}}VisualEST-Win.zip"
          asset_name: VisualEST-Win.zip
          asset_content_type: application/zip
# macOS steps
      - name: (macOS) Parse Release URL from release_url.txt
        if: matrix.os == 'macos-latest'
        id: get_release_info_macos
        run: |
          value=`cat ./release_url/release_url.txt`
          echo ::set-output name=upload_url::$value
      - name: (macOS) Zip the artefacts
        working-directory: ${{env.working-directory}}
        if: matrix.os == 'macos-latest'
        run: zip -r installers-macOS.zip ./target/installer/
      - name: (macOS) Upload the release assets
        if: matrix.os == 'macos-latest'
        id: upload-release-asset-macos 
        uses: actions/upload-release-asset@v1.0.1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.get_release_info_macos.outputs.upload_url }} 
          asset_path: "${{env.working-directory}}/target/installer/Visual EST-${{ steps.get_release_version_macos.outputs.release_version }}.pkg"
          asset_name: VisualEST-macOS.pkg
          asset_content_type: application/octet-stream 
